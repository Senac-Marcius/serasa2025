import React, { useState, useEffect } from 'react';
import { View, StyleSheet, Alert } from 'react-native';
import MyView from '../../src/components/MyView';
import { useRouter } from 'expo-router';
import { iCategory, setCategory, updateCategory, deleteCategory, getCategories } from '../../src/controllers/category';
import MyButton from '../../src/components/MyButtons';
import MyText from '../../src/components/MyText';
import { Myinput } from '../../src/components/MyInputs';
import MyList from '../../src/components/MyList';
import { MyModal } from '../../src/components/MyModal';

export default function LocalsScreen() {
    const [req, setReq] = useState<iCategory>({
        id: -1,
        name: '',
        description: '',
        created_at: new Date().toISOString(),
    });

    const [locals, setLocals] = useState<iCategory[]>([]);
    const [visible, setVisible] = useState(false);
    const router = useRouter();

    useEffect(() => {
        (async () => {
            const retorno = await getCategories({});
            if (retorno.status && retorno.data && retorno.data.length > 0) {
                setLocals(retorno.data);
            }
        })();
    }, []);

    async function handleRegister() {
        if (!req.name.trim() || !req.description.trim()) {
            Alert.alert('Erro', 'Preencha todos os campos obrigatórios.');
            return;
        }

        try {
            if (req.id === -1) {
                const newId = locals.length ? locals[locals.length - 1].id + 1 : 0;
                const newLocal = { ...req, id: newId };
                setLocals([...locals, newLocal]);
                await setCategory(newLocal);
            } else {
                const updatedLocals = locals.map((l) => (l.id === req.id ? req : l));
                setLocals(updatedLocals);
                await updateCategory(req);
            }

            setReq({
                id: -1,
                name: '',
                description: '',
                created_at: new Date().toISOString(),
            });

            setVisible(false);
        } catch (error) {
            Alert.alert('Erro', 'Erro ao salvar o local.');
        }
    }

    function editLocal(id: number) {
        const local = locals.find((l) => l.id === id);
        if (local) {
            setReq(local);
            setVisible(true);
        }
    }

    async function delLocal(id: number) {
        try {
            await deleteCategory(id);
            const updatedLocals = locals.filter((l) => l.id !== id);
            setLocals(updatedLocals);
        } catch (error) {
            Alert.alert('Erro', 'Erro ao excluir o local.');
        }
    }

    return (
        <MyView>
            <View style={styles.headerContainer}>
                <MyText>Cadastro de Locais</MyText>
                <MyButton
                    color="#3AC7A8"
                    style={styles.addButton}
                    onPress={() => setVisible(true)}
                    title="Novo Local"
                />
            </View>

            <MyModal
                style={styles.modal}
                visible={visible}
                setVisible={setVisible}
                closeButtonTitle="Fechar"
                handleClosedButton={() => {
                    setReq({
                        id: -1,
                        name: '',
                        description: '',
                        created_at: new Date().toISOString(),
                    });
                }}
                title={req.id === -1 ? 'Cadastrar Local' : 'Editar Local'}
                buttonStyle={{
                    width: 150,
                    marginTop: 10,
                    marginBottom: 10,
                }}
            >
                <Myinput
                    placeholder="Digite o Nome"
                    value={req.name}
                    onChangeText={(text: string) => setReq({ ...req, name: text })}
                    label="Nome"
                    iconName="location-on"
                />

                <Myinput
                    placeholder="Descrição"
                    value={req.description}
                    onChangeText={(text: string) => setReq({ ...req, description: text })}
                    label="Descrição"
                    iconName="description"
                />

                <View style={styles.modalButtons}>
                    <MyButton
                        style={styles.buttonSave}
                        onPress={() => handleRegister()}
                        title={req.id === -1 ? 'Cadastrar' : 'Atualizar'}
                    />
                </View>
            </MyModal>

            <MyList
                style={styles.table}
                data={locals}
                keyItem={(item) => item.id.toString()}
                renderItem={({ item }) => (
                    <View style={styles.tableRow}>
                        <MyText style={styles.td}>{item.name}</MyText>
                        <MyText style={styles.td}>{item.description}</MyText>
                        <MyText style={styles.td}>{new Date(item.created_at).toLocaleString()}</MyText>
                        <View style={styles.actionsContainer}>
                            <MyButton
                                color="#3AC7A8"
                                style={styles.editButton}
                                onPress={() => editLocal(item.id)}
                                title="Editar"
                            />
                            <MyButton
                                color="#BC544B"
                                style={styles.deleteButton}
                                onPress={() => delLocal(item.id)}
                                title="Excluir"
                            />
                        </View>
                    </View>
                )}
                header={
                    <View style={styles.tableHeader}>
                        <MyText style={styles.th}>Nome</MyText>
                        <MyText style={styles.th}>Descrição</MyText>
                        <MyText style={styles.th}>Data</MyText>
                        <MyText style={styles.th}>Ações</MyText>
                    </View>
                }
            />
        </MyView>
    );
}

const styles = StyleSheet.create({
    headerContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingHorizontal: 16,
        paddingVertical: 12,
        backgroundColor: '#ffffff',
        borderBottomWidth: 1,
        borderBottomColor: '#e0e0e0',
    },
    addButton: {
        backgroundColor: '#4CAF50',
        paddingVertical: 8,
        paddingHorizontal: 16,
        borderRadius: 6,
    },
    modal: {
        margin: 'auto',
        display: 'flex',
        width: 'auto',
        height: 'auto',
        padding: 20,
        backgroundColor: 'white',
        borderRadius: 20,
        borderWidth: 4,
        borderColor: 'purple',
        alignItems: 'center',
        justifyContent: 'flex-end',
    },
    modalButtons: {
        flexDirection: 'row',
        justifyContent: 'space-between',
    },
    buttonSave: {
        marginBottom: 10,
        fontSize: 15,
        padding: 10,
        backgroundColor: '#FFDB58',
        borderRadius: 100,
        marginHorizontal: 5,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.2,
        shadowRadius: 2,
        elevation: 3,
        flex: 1,
    },
    table: {
        backgroundColor: '#FFF',
        borderRadius: 10,
        padding: 8,
    },
    tableHeader: {
        flexDirection: 'row',
        paddingVertical: 10,
        borderBottomWidth: 1,
        borderBottomColor: '#ddd',
    },
    tableRow: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingVertical: 10,
        borderBottomWidth: 1,
        borderBottomColor: '#eee',
    },
    th: {
        flex: 1,
        fontWeight: '600',
        fontSize: 13,
        color: '#333',
        textAlign: 'center',
    },
    td: {
        flex: 1,
        fontSize: 13,
        color: '#444',
        textAlign: 'center',
    },
    actionsContainer: {
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        flex: 1,
    },
    editButton: {
        fontSize: 15,
        padding: 10,
        backgroundColor: '#FFDB58',
        borderRadius: 100,
        marginHorizontal: 5,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.2,
        shadowRadius: 2,
        elevation: 3,
    },
    deleteButton: {
        fontSize: 15,
        padding: 10,
        backgroundColor: '#FF5252',
        borderRadius: 100,
        marginHorizontal: 5,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.2,
        shadowRadius: 2,
        elevation: 3,
    },
});